2025-08-24 17:20:17.261 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 17:20:18.408 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (60ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 17:20:19.469 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (376ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 17:20:26.453 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 11.3355 ms
2025-08-24 17:20:37.483 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /swagger responded 404 in 0.1782 ms
2025-08-24 17:21:19.721 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 17:21:20.690 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 17:21:21.074 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (27ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 17:21:23.273 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 3.9570 ms
2025-08-24 17:21:56.664 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /Swagger responded 404 in 0.2277 ms
2025-08-24 17:30:33.755 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 17:30:34.773 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (62ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 17:30:35.342 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (114ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 17:30:37.692 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 3.8875 ms
2025-08-24 17:33:08.233 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 Starting to fetch restaurants...
2025-08-24 17:33:08.960 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (126ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street], [d].[Id], [d].[Description], [d].[Name], [d].[Price], [d].[RestaurantId]
FROM [Restaurants] AS [r]
LEFT JOIN [Dishes] AS [d] ON [r].[Id] = [d].[RestaurantId]
ORDER BY [r].[Id]
2025-08-24 17:33:09.334 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 Successfully fetched 13 restaurants in 1094ms
2025-08-24 17:33:09.363 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 restaurantsDTO: [{"Id":1,"Name":"Pizza Palace","Description":"Best pizza in town","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@pizzapalace.com","ContactNumber":"+123456789","CreatedAt":"2025-07-08T04:36:23.8224503","City":"Nairobi","Street":"Kenyatta Avenue","PostalCode":"00100","Dishes":[{"Id":1,"RestaurantId":1,"Name":"Margherita","Description":"Classic cheese and tomato","Price":"8.99","$type":"DishDTO"},{"Id":2,"RestaurantId":1,"Name":"Pepperoni","Description":"Pepperoni and cheese","Price":"9.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":2,"Name":"Sushi World","Description":"Fresh sushi and sashimi","Category":"Japanese","HasDelivery":false,"ContactEmail":"info@sushiworld.com","ContactNumber":"+987654321","CreatedAt":"2025-07-08T04:36:23.8225864","City":"Mombasa","Street":"Moi Avenue","PostalCode":"80100","Dishes":[{"Id":3,"RestaurantId":2,"Name":"Salmon Nigiri","Description":"Fresh salmon over rice","Price":"12.99","$type":"DishDTO"},{"Id":4,"RestaurantId":2,"Name":"California Roll","Description":"Crab, avocado, and cucumber","Price":"10.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":3,"Name":"Spice Garden","Description":"Authentic Indian cuisine","Category":"Indian","HasDelivery":true,"ContactEmail":"contact@spicegarden.co.ke","ContactNumber":"+254712345678","CreatedAt":"2025-07-08T04:36:23.8225881","City":"Kisumu","Street":"Oginga Odinga Street","PostalCode":"40100","Dishes":[{"Id":5,"RestaurantId":3,"Name":"Butter Chicken","Description":"Creamy tomato-based chicken curry","Price":"11.99","$type":"DishDTO"},{"Id":6,"RestaurantId":3,"Name":"Paneer Tikka","Description":"Grilled cottage cheese cubes","Price":"9.49","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":4,"Name":"Sample Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":5,"Name":"Sample Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":7,"Name":"Amos Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":8,"Name":"Moyo Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":11,"Name":"New2 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":8,"RestaurantId":11,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":9,"RestaurantId":11,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":12,"Name":"New3 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":10,"RestaurantId":12,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":11,"RestaurantId":12,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":13,"Name":"New4 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":12,"RestaurantId":13,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":13,"RestaurantId":13,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":14,"Name":"New5 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":15,"Name":"New6 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":14,"RestaurantId":15,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":15,"RestaurantId":15,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"},{"Id":16,"RestaurantId":15,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":17,"RestaurantId":15,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":16,"Name":"New6 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":18,"RestaurantId":16,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":19,"RestaurantId":16,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"},{"Id":20,"RestaurantId":16,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":21,"RestaurantId":16,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"}]
2025-08-24 17:33:09.838 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /api/Restaurant responded 200 in 7430.1224 ms
2025-08-24 17:33:32.788 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 Starting to fetch restaurants...
2025-08-24 17:33:32.968 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street], [d].[Id], [d].[Description], [d].[Name], [d].[Price], [d].[RestaurantId]
FROM [Restaurants] AS [r]
LEFT JOIN [Dishes] AS [d] ON [r].[Id] = [d].[RestaurantId]
ORDER BY [r].[Id]
2025-08-24 17:33:32.987 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 Successfully fetched 13 restaurants in 189ms
2025-08-24 17:33:32.989 +03:00 [INF] (Thread ) |Restaurant.Controllers.RestaurantController| 
 restaurantsDTO: [{"Id":1,"Name":"Pizza Palace","Description":"Best pizza in town","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@pizzapalace.com","ContactNumber":"+123456789","CreatedAt":"2025-07-08T04:36:23.8224503","City":"Nairobi","Street":"Kenyatta Avenue","PostalCode":"00100","Dishes":[{"Id":1,"RestaurantId":1,"Name":"Margherita","Description":"Classic cheese and tomato","Price":"8.99","$type":"DishDTO"},{"Id":2,"RestaurantId":1,"Name":"Pepperoni","Description":"Pepperoni and cheese","Price":"9.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":2,"Name":"Sushi World","Description":"Fresh sushi and sashimi","Category":"Japanese","HasDelivery":false,"ContactEmail":"info@sushiworld.com","ContactNumber":"+987654321","CreatedAt":"2025-07-08T04:36:23.8225864","City":"Mombasa","Street":"Moi Avenue","PostalCode":"80100","Dishes":[{"Id":3,"RestaurantId":2,"Name":"Salmon Nigiri","Description":"Fresh salmon over rice","Price":"12.99","$type":"DishDTO"},{"Id":4,"RestaurantId":2,"Name":"California Roll","Description":"Crab, avocado, and cucumber","Price":"10.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":3,"Name":"Spice Garden","Description":"Authentic Indian cuisine","Category":"Indian","HasDelivery":true,"ContactEmail":"contact@spicegarden.co.ke","ContactNumber":"+254712345678","CreatedAt":"2025-07-08T04:36:23.8225881","City":"Kisumu","Street":"Oginga Odinga Street","PostalCode":"40100","Dishes":[{"Id":5,"RestaurantId":3,"Name":"Butter Chicken","Description":"Creamy tomato-based chicken curry","Price":"11.99","$type":"DishDTO"},{"Id":6,"RestaurantId":3,"Name":"Paneer Tikka","Description":"Grilled cottage cheese cubes","Price":"9.49","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":4,"Name":"Sample Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":5,"Name":"Sample Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":7,"Name":"Amos Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":8,"Name":"Moyo Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":11,"Name":"New2 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":8,"RestaurantId":11,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":9,"RestaurantId":11,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":12,"Name":"New3 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":10,"RestaurantId":12,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":11,"RestaurantId":12,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":13,"Name":"New4 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":12,"RestaurantId":13,"Name":"Spaghetti Carbonara","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":13,"RestaurantId":13,"Name":"Margherita Pizza","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":14,"Name":"New5 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[],"$type":"RestaurantsDTO"},{"Id":15,"Name":"New6 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":14,"RestaurantId":15,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":15,"RestaurantId":15,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"},{"Id":16,"RestaurantId":15,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":17,"RestaurantId":15,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"},{"Id":16,"Name":"New6 Restaurant","Description":"A great place to eat with delicious food","Category":"Italian","HasDelivery":true,"ContactEmail":"contact@samplerestaurant.com","ContactNumber":"+1234567890","CreatedAt":"2023-05-15T12:00:00.0000000","City":"New York","Street":"123 Main St","PostalCode":"10001","Dishes":[{"Id":18,"RestaurantId":16,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":19,"RestaurantId":16,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"},{"Id":20,"RestaurantId":16,"Name":"Spaghetti Carbonara 2","Description":"Classic Italian pasta with eggs, cheese, pancetta, and pepper","Price":"14.99","$type":"DishDTO"},{"Id":21,"RestaurantId":16,"Name":"Margherita Pizza 2","Description":"Traditional pizza with tomato sauce, mozzarella, and basil","Price":"12.99","$type":"DishDTO"}],"$type":"RestaurantsDTO"}]
2025-08-24 17:33:33.422 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /api/Restaurant responded 200 in 13997.1530 ms
2025-08-24 17:37:42.297 +03:00 [WRN] (Thread ) |LuckyPennySoftware.MediatR.License| 
 You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-08-24 17:37:48.378 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 17:37:48.588 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (84ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
FROM [Restaurants] AS [r]
WHERE [r].[Id] = @__Id_0
2025-08-24 17:37:48.651 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP PUT /WeatherForecast responded 404 in 6391.4431 ms
2025-08-24 17:39:11.686 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Database.Transaction| 
 Savepoints are disabled because Multiple Active Result Sets (MARS) is enabled. If 'SaveChanges' fails, then the transaction cannot be automatically rolled back to a known clean state. Instead, the transaction should be rolled back by the application before retrying 'SaveChanges'. See https://go.microsoft.com/fwlink/?linkid=2149338 for more information and examples. To identify the code which triggers this warning, call 'ConfigureWarnings(w => w.Throw(SqlServerEventId.SavepointsDisabledBecauseOfMARS))'.
2025-08-24 17:39:11.797 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (102ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (DbType = DateTime2), @p4='?' (Size = 4000), @p5='?' (DbType = Boolean), @p6='?' (Size = 4000), @p7='?' (Size = 4000), @p8='?' (Size = 4000), @p9='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Restaurants] ([Category], [ContactEmail], [ContactNumber], [CreatedAt], [Description], [HasDelivery], [Name], [address_City], [address_PostalCode], [address_Street])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9);
2025-08-24 17:39:11.862 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (34ms) [Parameters=[@p10='?' (Size = 4000), @p11='?' (Size = 4000), @p12='?' (Size = 4000), @p13='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Dishes] ([Description], [Name], [Price], [RestaurantId])
OUTPUT INSERTED.[Id]
VALUES (@p10, @p11, @p12, @p13);
2025-08-24 17:39:11.901 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Database.Transaction| 
 Savepoints are disabled because Multiple Active Result Sets (MARS) is enabled. If 'SaveChanges' fails, then the transaction cannot be automatically rolled back to a known clean state. Instead, the transaction should be rolled back by the application before retrying 'SaveChanges'. See https://go.microsoft.com/fwlink/?linkid=2149338 for more information and examples. To identify the code which triggers this warning, call 'ConfigureWarnings(w => w.Throw(SqlServerEventId.SavepointsDisabledBecauseOfMARS))'.
2025-08-24 17:39:11.913 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (9ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Dishes] ([Description], [Name], [Price], [RestaurantId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3);
2025-08-24 17:39:11.988 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP POST /WeatherForecast/add responded 201 in 7129.3034 ms
2025-08-24 17:39:44.436 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 17:39:44.458 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (17ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
FROM [Restaurants] AS [r]
WHERE [r].[Id] = @__Id_0
2025-08-24 17:39:44.465 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Successfully fetched Restaurant.Domain.Entities.Restaurants restaurants in 26ms
2025-08-24 17:39:44.470 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /WeatherForecast/find responded 200 in 2464.0813 ms
2025-08-24 18:13:01.737 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 18:13:02.878 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 18:13:03.301 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (53ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 18:13:06.006 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 5.2520 ms
2025-08-24 18:13:44.948 +03:00 [WRN] (Thread ) |LuckyPennySoftware.MediatR.License| 
 You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-08-24 18:13:51.604 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 18:14:01.478 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (58ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
FROM [Restaurants] AS [r]
WHERE [r].[Id] = @__Id_0
2025-08-24 18:14:07.159 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Successfully fetched Restaurant.Domain.Entities.Restaurants restaurants in 14896ms
2025-08-24 18:14:07.185 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /WeatherForecast/find responded 200 in 22353.8070 ms
2025-08-24 18:17:04.223 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 18:17:04.904 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 18:17:05.241 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 18:17:06.989 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 2.3732 ms
2025-08-24 18:17:28.462 +03:00 [WRN] (Thread ) |LuckyPennySoftware.MediatR.License| 
 You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-08-24 18:17:30.619 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 18:17:30.926 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (67ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [r0].[Id], [r0].[Category], [r0].[ContactEmail], [r0].[ContactNumber], [r0].[CreatedAt], [r0].[Description], [r0].[HasDelivery], [r0].[Name], [r0].[address_City], [r0].[address_PostalCode], [r0].[address_Street], [d].[Id], [d].[Description], [d].[Name], [d].[Price], [d].[RestaurantId]
FROM (
    SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
    FROM [Restaurants] AS [r]
    WHERE [r].[Id] = @__Id_0
) AS [r0]
LEFT JOIN [Dishes] AS [d] ON [r0].[Id] = [d].[RestaurantId]
ORDER BY [r0].[Id]
2025-08-24 18:17:31.013 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Successfully fetched Restaurant.Domain.Entities.Restaurants restaurants in 391ms
2025-08-24 18:17:31.038 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /WeatherForecast/find responded 200 in 2709.6460 ms
2025-08-24 18:18:02.640 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 18:18:02.731 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (16ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [r0].[Id], [r0].[Category], [r0].[ContactEmail], [r0].[ContactNumber], [r0].[CreatedAt], [r0].[Description], [r0].[HasDelivery], [r0].[Name], [r0].[address_City], [r0].[address_PostalCode], [r0].[address_Street], [d].[Id], [d].[Description], [d].[Name], [d].[Price], [d].[RestaurantId]
FROM (
    SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
    FROM [Restaurants] AS [r]
    WHERE [r].[Id] = @__Id_0
) AS [r0]
LEFT JOIN [Dishes] AS [d] ON [r0].[Id] = [d].[RestaurantId]
ORDER BY [r0].[Id]
2025-08-24 18:18:02.735 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Successfully fetched Restaurant.Domain.Entities.Restaurants restaurants in 92ms
2025-08-24 18:18:02.737 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /WeatherForecast/find responded 200 in 2392.3993 ms
2025-08-24 18:20:12.106 +03:00 [WRN] (Thread ) |Microsoft.EntityFrameworkCore.Model.Validation| 
 The entity type 'Address' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-08-24 18:20:12.889 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2025-08-24 18:20:13.202 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Restaurants] AS [r]) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2025-08-24 18:20:15.273 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET / responded 404 in 6.9863 ms
2025-08-24 18:20:48.273 +03:00 [WRN] (Thread ) |LuckyPennySoftware.MediatR.License| 
 You do not have a valid license key for the Lucky Penny software MediatR. This is allowed for development and testing scenarios. If you are running in production you are required to have a licensed version. Please visit https://luckypennysoftware.com to obtain a valid license.
2025-08-24 18:20:57.357 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Starting to fetch restaurants...
2025-08-24 18:20:57.740 +03:00 [INF] (Thread ) |Microsoft.EntityFrameworkCore.Database.Command| 
 Executed DbCommand (52ms) [Parameters=[@__Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [r0].[Id], [r0].[Category], [r0].[ContactEmail], [r0].[ContactNumber], [r0].[CreatedAt], [r0].[Description], [r0].[HasDelivery], [r0].[Name], [r0].[address_City], [r0].[address_PostalCode], [r0].[address_Street], [d].[Id], [d].[Description], [d].[Name], [d].[Price], [d].[RestaurantId]
FROM (
    SELECT TOP(1) [r].[Id], [r].[Category], [r].[ContactEmail], [r].[ContactNumber], [r].[CreatedAt], [r].[Description], [r].[HasDelivery], [r].[Name], [r].[address_City], [r].[address_PostalCode], [r].[address_Street]
    FROM [Restaurants] AS [r]
    WHERE [r].[Id] = @__Id_0
) AS [r0]
LEFT JOIN [Dishes] AS [d] ON [r0].[Id] = [d].[RestaurantId]
ORDER BY [r0].[Id]
2025-08-24 18:20:57.834 +03:00 [INF] (Thread ) |Restaurant.Controllers.WeatherForecastController| 
 Successfully fetched Restaurant.Domain.Entities.Restaurants restaurants in 473ms
2025-08-24 18:20:57.856 +03:00 [INF] (Thread ) |Serilog.AspNetCore.RequestLoggingMiddleware| 
 HTTP GET /WeatherForecast/find responded 200 in 10083.9518 ms
